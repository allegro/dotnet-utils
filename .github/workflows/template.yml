on:
  workflow_call:
    inputs:
      publish:
        required: false
        type: boolean
        default: false
      projectName:
        required: true
        type: string
      solutionName:
        required: true
        type: string
      tagName:
        required: false
        type: string
      onPublishNugetPush:
        required: false
        type: boolean
        default: true
    secrets:
      SM_CLIENT_CERT_PASSWORD:
        required: false
      SM_CLIENT_CERT_FILE_B64:
        required: false
      SM_HOST:
        required: false
      SM_API_KEY:
        required: false
      SM_CODE_SIGNING_CERT_SHA1_HASH:
        required: false
      nugetApiKey:
        required: false
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/${{ inputs.solutionName }}
    outputs:
      nupkgFilename: ${{ steps.nupkg.outputs.filename }}
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: FormatCheck
      run: dotnet format --verify-no-changes
    - name: Build
      run: dotnet build -c Release --no-restore
    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal
    - name: Pack
      run: dotnet pack -v normal -c Release --no-build --include-symbols --include-source -o package
    - name: Verify package name & version
      id: nupkg
      if: inputs.publish
      run: |
        TAG_NAME=${{ inputs.tagName }}
        VERSION=${TAG_NAME##*_}
        NUPKG="${{ inputs.projectName }}.${VERSION}.nupkg"
        echo "filename=$NUPKG" >> $GITHUB_OUTPUT
        if [ ! -f package/$NUPKG ]; then
          echo "File '$NUPKG' does not exist";
          exit 1;
        fi
    - uses: actions/upload-artifact@v4
      if: inputs.publish
      with:
        name: package-${{ inputs.solutionName }}
        path: src/${{ inputs.solutionName }}/package
  publish:
    runs-on: windows-latest
    if: inputs.publish
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: unsigned
          pattern: package-*
          merge-multiple: true
      - name: NuGet Install
        uses: NuGet/setup-nuget@v2.0.1
        with:
          nuget-version: latest
      - name: Setup Certificate
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/cognite_code_signing_github_actions.p12
        shell: bash
      - name: Set variables
        id: variables
        run: |
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV"
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_FILE=D:\\cognite_code_signing_github_actions.p12" >> "$GITHUB_ENV"
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV"
        shell: bash
      - name: Install DigiCert Client tools
        uses: digicert/ssm-code-signing@v1.0.1
        env:
          SM_API_KEY: ${{ env.SM_API_KEY }}
          SM_CLIENT_CERT_PASSWORD: ${{ env.SM_CLIENT_CERT_PASSWORD }}
          SM_CLIENT_CERT_FILE: ${{ env.SM_CLIENT_CERT_FILE }}
      - name: Setup SSM KSP on windows latest
        run: |
          smksp_registrar.exe list
          smctl.exe keypair ls
          C:\Windows\System32\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user
          smksp_cert_sync.exe
          smctl.exe healthcheck
        shell: cmd
      - name: Signing using Nuget
        run: |
          dir "%cd%\unsigned"
          mkdir "%cd%\signed"
          nuget sign "%cd%\unsigned\*.nupkg" -Timestamper http://timestamp.digicert.com -outputdirectory "%cd%\signed" -CertificateFingerprint ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} -HashAlgorithm SHA256 -Verbosity detailed -Overwrite
          nuget verify -All "%cd%\signed\*.nupkg"
        shell: cmd
      - name: Push package
        shell: cmd
        if: inputs.onPublishNugetPush
        run: |
          dotnet nuget push "%cd%\signed\*.nupkg" --api-key ${{ secrets.nugetApiKey }} --skip-duplicate --source https://api.nuget.org/v3/index.json
