# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space

# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Code files
[*.{cs,csx,fs,fsx}]
indent_size = 4
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = false

# XML project files
[*.{csproj,fsproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Powershell files
[*.ps1]
indent_size = 2

# Shell script files
[*.sh]
end_of_line = lf
indent_size = 2

# Dotnet code style settings:
[*.{cs,fs}]

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true:refactoring
dotnet_separate_import_directive_groups = false:refactoring

# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion

# Whitespace options
dotnet_style_allow_multiple_blank_lines_experimental = false
dotnet_style_allow_statement_immediately_after_block_experimental = false

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case

# Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_readonly_field_style

dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly

dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case

# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style

dotnet_naming_symbols.constants.applicable_kinds = field
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = pascal_case

# Static fields are camelCase and start with s_
dotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static

dotnet_naming_style.static_field_style.capitalization = pascal_case
#dotnet_naming_style.static_field_style.required_prefix = s_

# Instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field

dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

dotnet_naming_style.camel_case_style.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_function

dotnet_naming_style.local_function_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.all_members.applicable_kinds = *

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# IDE0036: Order modifiers
dotnet_diagnostic.IDE0036.severity = warning

# IDE0043: Format string contains invalid placeholder
dotnet_diagnostic.IDE0043.severity = warning

# IDE0044: Make field readonly
dotnet_diagnostic.IDE0044.severity = warning

# IDE0011: Add braces
csharp_prefer_braces = when_multiline:warning
# NOTE: We need the below severity entry for Add Braces due to https://github.com/dotnet/roslyn/issues/44201
# TODO: decide if we want to suggest it or not
dotnet_diagnostic.IDE0011.severity = suggestion

# IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# CONSIDER: Are IDE0051 and IDE0052 too noisy to be warnings for IDE editing scenarios? Should they be made build-only warnings?
# IDE0051: Remove unused private member
dotnet_diagnostic.IDE0051.severity = warning

# IDE0052: Remove unread private member
dotnet_diagnostic.IDE0052.severity = suggestion

# IDE0059: Unnecessary assignment to a value
dotnet_diagnostic.IDE0059.severity = suggestion

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = suggestion

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# CA1822: Make member static
dotnet_diagnostic.CA1822.severity = warning

# IDE0005: Using directive is unnecessary
dotnet_diagnostic.IDE0005.severity = warning

# dotnet_style_allow_multiple_blank_lines_experimental
dotnet_diagnostic.IDE2000.severity = warning

# csharp_style_allow_embedded_statements_on_same_line_experimental
dotnet_diagnostic.IDE2001.severity = warning

# csharp_style_allow_blank_lines_between_consecutive_braces_experimental
dotnet_diagnostic.IDE2002.severity = warning

# dotnet_style_allow_statement_immediately_after_block_experimental
dotnet_diagnostic.IDE2003.severity = suggestion

# csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental
dotnet_diagnostic.IDE2004.severity = warning

# CSharp code style settings:
[*.cs]
# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Whitespace options
csharp_style_allow_embedded_statements_on_same_line_experimental = false
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false

# Prefer "var" everywhere
dotnet_diagnostic.IDE0007.severity = warning
csharp_style_var_for_built_in_types = true:error
csharp_style_var_when_type_is_apparent = true:error
csharp_style_var_elsewhere = true:error

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:error
csharp_style_expression_bodied_indexers = true:error
csharp_style_expression_bodied_accessors = true:error

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_pattern_matching_over_as_with_null_check = true:error
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:error
csharp_style_conditional_delegate_call = true:suggestion

# Spacing
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = do_not_ignore
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Blocks are allowed
csharp_prefer_braces = true:silent
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

# SA0001: All diagnostics of XML documentation comments has been disabled due to the current project configuration.
dotnet_diagnostic.SA0001.severity = none

# SA1009: A closing parenthesis within a C# statement is not spaced correctly.
# TODO: it's broken (doesn't work with nullable types)
dotnet_diagnostic.SA1009.severity = none

# SA1011: A closing square bracket within a C# statement is not spaced correctly.
# TODO: false positive with NRT
dotnet_diagnostic.SA1011.severity = none

# SA1101: Prefix local calls with this
dotnet_diagnostic.SA1101.severity = none

# SA1111: The closing parenthesis or bracket in a call to a C# method or indexer,
# or the declaration of a method or indexer, is not placed on the same line as the last parameter.
dotnet_diagnostic.SA1111.severity = suggestion

# SA1118: A parameter to a C# method or indexer, other than the first parameter, spans across multiple lines.
dotnet_diagnostic.SA1118.severity = suggestion

# SA1123: The C# code contains a region within the body of a code element.
dotnet_diagnostic.SA1123.severity = suggestion

# SA1124: The C# code contains a region.
dotnet_diagnostic.SA1124.severity = suggestion

# SA1127: A generic constraint on a type or method declaration is on the same line as the declaration, within a C# code file.
dotnet_diagnostic.SA1127.severity = suggestion

# SA1128: A constructor initializer is on the same line as the constructor declaration, within a C# code file.
dotnet_diagnostic.SA1128.severity = suggestion

# SA1134: An attribute is placed on the same line of code as another attribute or element.
dotnet_diagnostic.SA1134.severity = suggestion

# SA1201: Elements should appear in the correct order
dotnet_diagnostic.SA1201.severity = none

# SA1202: An element within a C# code file is out of order within regard to access level
dotnet_diagnostic.SA1202.severity = suggestion

# SA1204: Static elements should appear before instance elements
dotnet_diagnostic.SA1204.severity = suggestion

# SA1309: Field names should not begin with underscore
dotnet_diagnostic.SA1309.severity = none

# SA1401: A field within a C# class has an access modifier other than private.
dotnet_diagnostic.SA1401.severity = suggestion

# SA1402: A C# code file contains more than one unique type.
dotnet_diagnostic.SA1402.severity = none

# SA1413: Use trailing commas in multi line initializers
dotnet_diagnostic.SA1413.severity = none

# SA1501: A C# statement containing opening and closing braces is written completely on a single line.
dotnet_diagnostic.SA1501.severity = suggestion

# SA1502: A C# element containing opening and closing braces is written completely on a single line.
dotnet_diagnostic.SA1502.severity = suggestion

# SA1503: The opening and closing braces for a C# statement have been omitted.
dotnet_diagnostic.SA1503.severity = none

# SA1512: A single-line comment within C# code is followed by a blank line.
dotnet_diagnostic.SA1512.severity = suggestion

# SA1515: A single-line comment within C# code is not preceded by a blank line.
dotnet_diagnostic.SA1515.severity = suggestion

# SA1516: Elements should be separated by blank line
dotnet_diagnostic.SA1516.severity = suggestion

# SA1519: The opening and closing braces for a multi-line C# statement have been omitted.
dotnet_diagnostic.SA1519.severity = suggestion

# SA1600: A C# code element is missing a documentation header.
dotnet_diagnostic.SA1600.severity = none

# SA1601: A C# partial element is missing a documentation header.
dotnet_diagnostic.SA1601.severity = none

# SA1602: An item within a C# enumeration is missing an Xml documentation header.
dotnet_diagnostic.SA1602.severity = none

# SA1611: A C# method, constructor, delegate or indexer element is missing documentation for one or more of its parameters.
dotnet_diagnostic.SA1611.severity = none

# SA1614: A <param> tag within a C# element's documentation header is empty.
dotnet_diagnostic.SA1614.severity = none

# SA1615: A C# element is missing documentation for its return value.
dotnet_diagnostic.SA1615.severity = none

# SA1623: Property summary documentation should match accessors
dotnet_diagnostic.SA1623.severity = none

# SA1629: A section of the Xml header documentation for a C# element does not end with a period
dotnet_diagnostic.SA1629.severity = none

# SA1633: A C# code file is missing a standard file header.
dotnet_diagnostic.SA1633.severity = none

# SA1642: The XML documentation header for a C# constructor does not contain the appropriate summary text.
dotnet_diagnostic.SA1642.severity = none

# SA1649: The file name of a C# code file does not match the first type declared in the file.
dotnet_diagnostic.SA1649.severity = none


# Microsoft.VisualStudio.Threading.Analyzers

# VSTHRD200: Use Async suffix for async methods
dotnet_diagnostic.VSTHRD200.severity = none


# xUnit

# xUnit1013: This rule is trigger by having a public method in a test class that is not marked as a test.
dotnet_diagnostic.xUnit1013.severity = suggestion


# AsyncFixer

# AsyncFixer01: Unnecessary async/await usage
dotnet_diagnostic.AsyncFixer01.severity = suggestion


# Meziantou.Analyzer

# MA0002: IEqualityComparer<string> or IComparer<string> is missing
dotnet_diagnostic.MA0002.severity = none

# MA0004: Use Task.ConfigureAwait(false)
dotnet_diagnostic.MA0004.severity = none

# MA0006: Use String.Equals instead of equality operator
dotnet_diagnostic.MA0006.severity = none

# MA0011: IFormatProvider is missing
dotnet_diagnostic.MA0011.severity = suggestion

# MA0015: Specify the parameter name in ArgumentException
dotnet_diagnostic.MA0015.severity = suggestion

# MA0016: Prefer return collection abstraction instead of implementation
dotnet_diagnostic.MA0016.severity = suggestion

# MA0026: Fix TODO comment
dotnet_diagnostic.MA0026.severity = suggestion

# MA0048: File name must match type name
dotnet_diagnostic.MA0048.severity = none

# MA0051: Method is too long
dotnet_diagnostic.MA0051.severity = suggestion
MA0051.maximum_lines_per_method = 60
MA0051.maximum_statements_per_method = 50

# MA0056: Do not call overridable members in constructor
dotnet_diagnostic.MA0056.severity = suggestion

# MA0074: Avoid implicit culture-sensitive methods
dotnet_diagnostic.MA0074.severity = suggestion
